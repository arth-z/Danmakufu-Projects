let objBoss;
let objScene;

function GetCenterX(){
	return GetStgFrameWidth() / 2;
}

function GetCenterY(){
	return GetStgFrameHeight() / 2;
}

function wait(n) {

	if (n < 0){
		return;
	}

	loop(n) {
		yield;
	}
}

function rand_int(min, max) {
	return round(rand(min, max))
}

// Thanks to Sparen's tutorial on screenshake for this code - unit 2, lesson 22.5, "extra"
task ScreenShakeA1(shaketime, intensity){
	let orig_focusX = GetCameraFocusX();
	let orig_focusY = GetCameraFocusY();
	let orig_focusZ = GetCameraFocusZ();
    while(shaketime > 0){
        SetCameraFocusX(orig_focusX + rand(-intensity, intensity));
        SetCameraFocusY(orig_focusY + rand(-intensity, intensity));
				SetCameraFocusZ(orig_focusZ + rand(-intensity, intensity));
				Set2DCameraFocusX(GetStgFrameWidth/2 + rand(-intensity, intensity));
				Set2DCameraFocusY(GetStgFrameHeight/2 + rand(-intensity, intensity));
        shaketime--;
        yield;
    }
    SetCameraFocusX(orig_focusX);
    SetCameraFocusY(orig_focusY);
		SetCameraFocusZ(orig_focusZ);
    Set2DCameraFocusX(GetStgFrameWidth/2);
    Set2DCameraFocusY(GetStgFrameHeight/2);
}

task ShockwaveExpand(posX, posY, duration, maxScale, colour) {
  let wave = ObjPrim_Create(OBJ_SPRITE_2D);
  let xScale = 0;
  let yScale = 0;
  let alpha = 255;

  ObjPrim_SetTexture(wave, GetCurrentScriptDirectory()~"./img/shockwave.png");
  ObjSprite2D_SetSourceRect(wave, 0, 0, 256, 256);
  ObjRender_SetPosition(wave, posX, posY, 0);

  ObjSprite2D_SetDestCenter(wave);
  ObjRender_SetBlendType(wave, BLEND_ADD_ARGB);
  ObjRender_SetColor(wave, colour[0], colour[1], colour[2]);

  let loop_iters = 0;
  while (loop_iters < duration) {

    xScale = (loop_iters/duration) * maxScale;
    yScale = (loop_iters/duration) * maxScale;
    alpha -= 255/duration;

    ObjRender_SetAlpha(wave, alpha);
    ObjRender_SetScaleXYZ(wave, xScale, yScale, 1);
		ObjRender_SetPosition(wave, posX, posY, 0);

    loop_iters++;
    yield;
  }
  Obj_Delete(wave);
}

task ShockwaveCharge(posX, posY, duration, maxScale, colour) {
  let wave = ObjPrim_Create(OBJ_SPRITE_2D);
  let xScale = maxScale;
  let yScale = maxScale;
  let alpha = 0;

  ObjPrim_SetTexture(wave, GetCurrentScriptDirectory()~"./img/shockwave.png");
  ObjSprite2D_SetSourceRect(wave, 0, 0, 256, 256);
  ObjRender_SetPosition(wave, posX, posY, 0);

  ObjSprite2D_SetDestCenter(wave);
  ObjRender_SetBlendType(wave, BLEND_ADD_ARGB);
  ObjRender_SetColor(wave, colour[0], colour[1], colour[2]);

  let loop_iters = 0;
  while (loop_iters < duration) {

    xScale = (1 - loop_iters/duration) * maxScale;
    yScale = (1 - loop_iters/duration) * maxScale;
		alpha += 255/duration*2;

    ObjRender_SetAlpha(wave, alpha);
    ObjRender_SetScaleXYZ(wave, xScale, yScale, 1);
		ObjRender_SetPosition(wave, posX, posY, 0);

    loop_iters++;
    yield;
  }
  Obj_Delete(wave);
}

task SinglePetalRelease(deX, deY, angX, deAlpha, deScale, radius, duration, colour){
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D); 
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	Obj_SetRenderPriority(obj, 0.49);
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory()~"./img/cherry_small.png");
	ObjSpriteList2D_SetSourceRect(obj, 0, 0, 64, 64);
	ObjSpriteList2D_SetDestCenter(obj);
  ObjRender_SetColor(obj, colour[0], colour[1], colour[2]);
	ObjRender_SetAngleXYZ(obj, 0, 0, angX);
	ObjRender_SetPosition(obj, deX, deY, 0);
	ObjRender_SetAlpha(obj, deAlpha);

	let scale = deScale;
	let randX = rand(-105, 105);
	let randY = rand(-105, 105);
	let	ang2 = rand(0, 360);
  let loop_iters = 0;
	
	while(loop_iters < duration){
		scale *= (duration - loop_iters)/duration;
		deX += (randX/radius);
		deY += (randY/radius);
		angX += (randX/radius);
		ang2 += (randX/radius);
		ObjSpriteList2D_ClearVertexCount(obj);
		ObjSpriteList2D_SetSourceRect(obj, 0, 0, 64, 64);
		ObjSpriteList2D_SetDestCenter(obj);
		ObjSpriteList2D_AddVertex(obj);
		
		ObjRender_SetPosition(obj, deX, deY, 0);
		ObjRender_SetAngleXYZ(obj, ang2, angX, (ang2+angX)/2);
		ObjRender_SetScaleXYZ(obj, scale, scale, scale);
		ObjRender_SetAlpha(obj, deAlpha*(duration-loop_iters)/duration);
    loop_iters++;
		yield;
	}
	Obj_Delete(obj);
}

task PetalRelease(deX, deY, angX, deAlpha, deScale, radius, duration, colour, intensity){
  let angle = angX;
  loop(intensity) {
    SinglePetalRelease(deX, deY, angle, deAlpha, deScale, radius, duration, colour);
    angle+=(360/angX)
  }
}

let shader;

task TLoadColourShader(colour) {
  let pathShader = GetCurrentScriptDirectory() ~ "./shader/colouration.hlsl";
  shader = ObjShader_Create();
  ObjShader_SetShaderF(shader, pathShader);
	ObjShader_SetTechnique(shader, "TecSaturate" ~ colour);
}

task TColour(on) {
  if (on) {
  	SetShaderI(shader, 21, 80);
  } else {
  	ResetShaderI(21, 80);
  }
}

task TUnloadColourShader {
  ResetShaderI(0, 100);
  Obj_Delete(shader);
}

// Thanks, Sparen!
// https://sparen.github.io/ph3tutorials/ph3u1l9.html#sub6
task DelayLaser(x, y, ang, l, w, dt, graph, delay){ 
  let objlaser = CreateStraightLaserA1(x, y, ang, l, w, dt, graph, delay);
  ObjStLaser_SetSource(objlaser, false);
  loop(delay-1){//So that the graphic never enlarges. 
      if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){
          Obj_Delete(objlaser); 
          return;
      }
      yield;
  }
  Obj_Delete(objlaser);
}

task ExpandOutTelegraphLaser(x, y, ang, l, w, dt, graph, delay){ 
  let objlaser = CreateStraightLaserA1(x, y, ang, 0, w, dt, graph, delay);
  let alpha = 255;
  let length = 0;
  ObjStLaser_SetSource(objlaser, false);
  loop(delay-1){//So that the graphic never enlarges. 
    alpha -= 255/(delay-1);
    length += l/(delay-1);
    ObjRender_SetAlpha(objlaser, alpha);
    ObjLaser_SetLength(objlaser, length);
    if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){
        Obj_Delete(objlaser); 
        return;
    }
    yield;
  }
  Obj_Delete(objlaser);
}

task ShrinkInTelegraphLaser(x, y, ang, l, w, dt, graph, delay){ 
  let objlaser = CreateStraightLaserA1(x, y, ang, l, w, dt, graph, delay);
  let alpha = 255;
  let length = l;
  ObjStLaser_SetSource(objlaser, false);
  loop(delay-1){
    alpha -= 255/(delay-1);
    length -= l/(delay-1);
    ObjLaser_SetLength(objlaser, length);
    ObjRender_SetAlpha(objlaser, alpha);
    if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){
        Obj_Delete(objlaser); 
        return;
    }
    yield;
  }
  Obj_Delete(objlaser);
}
