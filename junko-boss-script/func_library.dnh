let objBoss;
let objScene;

function GetCenterX(){
	return GetStgFrameWidth() / 2;
}

function GetCenterY(){
	return GetStgFrameHeight() / 2;
}

function wait(n) {

	if (n < 0){
		return;
	}

	loop(n) {
		yield;
	}
}

function rand_int(min, max) {
	return round(rand(min, max))
}


task TFinalize {

  while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		yield;
	}

	DeleteShotAll(TYPE_ALL, TYPE_FADE);
  Obj_Delete(objBoss);
	SetAutoDeleteObject(true);
  CloseScript(GetOwnScriptID());

  return;
}

task TFinalizeWait(time) {

  while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		yield;
	}

	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	Obj_Delete(objBoss);
	SetAutoDeleteObject(true);
  CloseScript(GetOwnScriptID());

		
  return;
}

// Thanks to Sparen's tutorial on screenshake for this code - unit 2, lesson 22.5, "extra"
task ScreenShakeA1(shaketime, intensity){
	let orig_focusX = GetCameraFocusX();
	let orig_focusY = GetCameraFocusY();
	let orig_focusZ = GetCameraFocusZ();
    while(shaketime > 0){
        SetCameraFocusX(orig_focusX + rand(-intensity, intensity));
        SetCameraFocusY(orig_focusY + rand(-intensity, intensity));
				SetCameraFocusZ(orig_focusZ + rand(-intensity, intensity));
				Set2DCameraFocusX(GetStgFrameWidth/2 + rand(-intensity, intensity));
				Set2DCameraFocusY(GetStgFrameHeight/2 + rand(-intensity, intensity));
        shaketime--;
        yield;
    }
    SetCameraFocusX(orig_focusX);
    SetCameraFocusY(orig_focusY);
		SetCameraFocusZ(orig_focusZ);
    Set2DCameraFocusX(GetStgFrameWidth/2);
    Set2DCameraFocusY(GetStgFrameHeight/2);
}

task ShockwaveExpand(posX, posY, duration, maxScale, colour) {
  let wave = ObjPrim_Create(OBJ_SPRITE_2D);
  let xScale = 0;
  let yScale = 0;
  let alpha = 255;

  ObjPrim_SetTexture(wave, GetCurrentScriptDirectory()~"./img/shockwave.png");
  ObjSprite2D_SetSourceRect(wave, 0, 0, 256, 256);
  ObjRender_SetPosition(wave, posX, posY, 0);

  ObjSprite2D_SetDestCenter(wave);
  ObjRender_SetBlendType(wave, BLEND_ADD_ARGB);
  ObjRender_SetColor(wave, colour[0], colour[1], colour[2]);

  let loop_iters = 0;
  while (loop_iters < duration) {

    xScale = (loop_iters/duration) * maxScale;
    yScale = (loop_iters/duration) * maxScale;
    alpha -= 255/duration;

    ObjRender_SetAlpha(wave, alpha);
    ObjRender_SetScaleXYZ(wave, xScale, yScale, 1);
		ObjRender_SetPosition(wave, posX, posY, 0);

    loop_iters++;
    yield;
  }
  Obj_Delete(wave);
}

task ShockwaveCharge(posX, posY, duration, maxScale, colour) {
  let wave = ObjPrim_Create(OBJ_SPRITE_2D);
  let xScale = maxScale;
  let yScale = maxScale;
  let alpha = 0;

  ObjPrim_SetTexture(wave, GetCurrentScriptDirectory()~"./img/shockwave.png");
  ObjSprite2D_SetSourceRect(wave, 0, 0, 256, 256);
  ObjRender_SetPosition(wave, posX, posY, 0);

  ObjSprite2D_SetDestCenter(wave);
  ObjRender_SetBlendType(wave, BLEND_ADD_ARGB);
  ObjRender_SetColor(wave, colour[0], colour[1], colour[2]);

  let loop_iters = 0;
  while (loop_iters < duration) {

    xScale = (1 - loop_iters/duration) * maxScale;
    yScale = (1 - loop_iters/duration) * maxScale;
		alpha += 255/duration*2;

    ObjRender_SetAlpha(wave, alpha);
    ObjRender_SetScaleXYZ(wave, xScale, yScale, 1);
		ObjRender_SetPosition(wave, posX, posY, 0);

    loop_iters++;
    yield;
  }
  Obj_Delete(wave);
}

let shader;

task TLoadBrightShader(colour) {
  let pathShader = GetCurrentScriptDirectory() ~ "./shader/bright_impact.hlsl";
  shader = ObjShader_Create();
  ObjShader_SetShaderF(shader, pathShader);
	ObjShader_SetTechnique(shader, "TecSaturate" ~ colour);
}

task TBright(on) {
  if (on) {
  	SetShaderI(shader, 21, 80);
  } else {
  	ResetShaderI(21, 80);
  }
}

task TUnloadBrightShader {
  ResetShaderI(0, 100);
  Obj_Delete(shader);
}