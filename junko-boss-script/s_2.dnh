#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Squirrel's Junko - Spellcard \"Red Star\""]
#Text["Still messing around with the stars. Misdirection is hard."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"
#include "./HatefulStar.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
        SetScriptResult(2250);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
        SetScriptResult(70);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
        SetScriptResult(1000000);
    }
}

@Initialize 
{
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);

  ObjEnemyBossScene_Regist(objBoss);
  ObjEnemyBossScene_StartSpell(objScene);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()*0.33, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  
  TStarInitialise(GetCenterX(), GetCenterY()*0.33, 0, 0);
  TStarDraw(200, "red");
  TStarHitFX;
  SetStarSpinRate(2);
  
  TJunkoSpellStartFX("\"Pure Fox's Three-Body Problem\"", NEUTRAL, 255, 50, 100);
  TJunkoCrownAuraDelay;

  MainTask;

  TJunkoFinalize;
  TStarFinalize;
}

task TJunkoCrownAuraDelay {
  wait(200);
  TJunkoCrownAura;
}

let new_x = GetCenterX() + rand(-50, 50);
let new_y = GetCenterY()*0.5 + rand(-10,10);

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  // movement constants
  let move_interval = 90;
  let move_time = 45;

  if (mainTimer < 16) {
    ObjEnemy_SetDamageRate(objBoss, 25, 25);
    MDrawJunkoMotionBegin(mainTimer);
  } else if (mainTimer < 44) {
    MDrawJunkoMotionContinue(mainTimer);
  } else if (mainTimer < 60) {
    MDrawJunkoMotionEnd(mainTimer);
  } else if (mainTimer < 200) {
    MDrawJunkoBlink(mainTimer);
    MJunkoBreathe(mainTimer);
  } else {
    ObjEnemy_SetDamageRate(objBoss, 100, 50);
    if (mainTimer % move_interval < move_time) {
      if (mainTimer % move_interval == 0) {
        new_x = GetCenterX() + rand(-50, 50);
        new_y = GetCenterY()*0.5 + rand(-10,10);
        ObjMove_SetDestAtFrame(objBoss, new_x, new_y, move_time);
      } else {
        MDrawJunkoMove(mainTimer % move_interval, move_interval, new_x, new_y, move_time);
      }
    } else {
      MDrawJunkoBlink(mainTimer);
      MJunkoBreathe(mainTimer);
    }
  }

  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 80, 80])};
  UpdateStarHitbox;

  mainTimer++;
  yield;
}

task circle(posX, posY, offset, inc, proj, accel, max) {
  
  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    CreateShotA2(posX, posY, 0, angle, accel, max, proj, 10);
  }

  angle += offset;

}

task MainTask {

  let shoot_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer01.wav");
  let boom_spawn = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_tan00.wav");
  TLoadColourShader("Red");

  wait(200);
  PlaySFX(boom_spawn);

  let angleL = 0;
  let angleS = 0;
  let loop_iters = 0;
  let lasers = [];
  let laser_interval = 90;

  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){

    let starX = ObjMove_GetX(objStar);
    let starY = ObjMove_GetY(objStar);
    
    // same logic as star-spell 1, just laser spawns are random this time
    if (loop_iters % laser_interval == 0) {
      lasers = [];
      loop(30) {
        let laser = CreateStraightLaserA1(starX, starY, angleL, 
                768, 20, laser_interval*0.2, 17, laser_interval);
        angleL = rand(0, 360);
        ObjLaser_SetGrazeInvalidFrame(laser, 5); 
        ObjLaser_SetInvalidLength(laser, 5, 5); 

        lasers = lasers ~ [laser];
      }
      angleS = GetAngleToPlayer(objStar);
      PlaySFX(laser_sfx);
      PlaySFX(boom_spawn);
      TStarShockwave("red");
    }

    if (loop_iters % laser_interval < laser_interval/3 && loop_iters > laser_interval) {
      TColour(true);
    } else {
      TColour(false);
    }

    let len = length(lasers);
    let magnitude = (laser_interval - (loop_iters % laser_interval))/laser_interval;

    // star speed and angle is constantly updated
    // magnitude approaches 0 as timer gets closer to laser interval, so star deccelerates
    // star only remembers angle to player from when lasers fire, so moves in a straight line
    SetStarMovement(magnitude*3, angleS);

    ascent(i in 0..len) {
      let laser = lasers[i];
      let angle = ObjStLaser_GetAngle(laser);
      let direction = power(-1, i%2+1);
      ObjStLaser_SetAngle(laser, angle+magnitude*direction);
      ObjMove_SetPosition(laser, starX, starY);
    }
    
    // intermittently shoot out rings of fireballs from boss
    if (loop_iters % (laser_interval*(2/3)) == 0) {
      let bossX = ObjMove_GetX(objBoss);
      let bossY = ObjMove_GetY(objBoss);
      let angleP = GetAngleToPlayer(objBoss);
      circle(bossX, bossY, angleP, 10, 376, 0.1, 2);
      PlaySFX(shoot_sfx);    
    }

    loop_iters++;
    yield;
  }
  TUnloadColourShader;
}