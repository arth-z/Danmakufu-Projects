#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Junko Prototyping - Spell"]
#Text["Code by Squirrelfart [r]Full bossfight eventually..."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"
#include "./HatefulStar.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
        SetScriptResult(5750);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
        SetScriptResult(65);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
        SetScriptResult(1000000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  
  TLoadJunkoFX;
  
  ObjEnemyBossScene_Regist(objBoss);
  ObjEnemyBossScene_StartSpell(objScene);
  
  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.5, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TJunkoSpellStartFX("Hateful Star I", DISPLEASED, 200, 0, 0);

  TStarInitialise(GetCenterX(), GetCenterY()/3, 0, 0);
  TStarDraw(200);

  MainTask;

  TJunkoExplodeIfDie;
  TFinalizeWait(60);
  TStarFinalize;
}

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  if (mainTimer < 16) {
    MDrawJunkoMotionBegin(mainTimer);
  } else if (mainTimer < 44) {
    MDrawJunkoMotionContinue(mainTimer);
  } else if (mainTimer < 60) {
    MDrawJunkoMotionEnd(mainTimer);
  } else if (mainTimer < 200) {
    MDrawJunkoBlink(mainTimer);
  } else {
    MDrawJunkoLaughContinue(mainTimer);
  }

  if (mainTimer == 60) {MJunkoChargeUp(200, 80)};

  
  UpdateStarHitbox;
  mainTimer++;
  yield;
}

task circle(offset, speed, inc, proj) {

  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    CreateShotA1(ObjMove_GetX(objStar), ObjMove_GetY(objStar), speed, angle, proj, 10);
    ObjSound_Play(shoot_sfx);
  }
}

let shoot_sfx;

task MainTask {

  shoot_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  ObjSound_SetVolumeRate(shoot_sfx, 70);
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer00.wav");
  ObjSound_SetVolumeRate(shoot_sfx, 50);

  let boom_spawn = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_tan00.wav");

  wait(200);
  PlaySFX(boom_spawn);

  let angleL = 0;
  let angleS = 0;
  let loop_iters = 0;
  let lasers = [];

  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){

    angleL = rand_int(0, 360);
    
    if (loop_iters % 120 == 0) {
      lasers = [];
      loop(60) {
        let laser = CreateStraightLaserA1(ObjMove_GetX(objStar), ObjMove_GetY(objStar), angleL, 
                512, 20, 30, 22, 120);
        angleL += 6;
        ObjLaser_SetGrazeInvalidFrame(laser, 5); 
        ObjLaser_SetInvalidLength(laser, 5, 5); 

        lasers = lasers ~ [laser];
      }
      PlaySFX(boom_spawn);
    }

    
    if (loop_iters % 40 == 0) {
      circle(angleS, 2, 3, L_DOT_BLUE);
      angleS += 1.5;
    }
    

    let len = length(lasers);
    ascent(i in 0..len) {
      let laser = lasers[i];
      let angle = ObjStLaser_GetAngle(laser);
      let direction = power(-1, i%2+1);
      let magnitude = (120 - (loop_iters % 120))/120;
      ObjStLaser_SetAngle(laser, angle+magnitude*direction);
    }

    loop_iters++;
    yield;
  }
  
}