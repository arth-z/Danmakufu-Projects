#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Squirrel's Junko - Nonspell 3"]
#Text["There's a trick to this one, so it's not as hard as what it's referencing."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
        SetScriptResult(6000);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
        SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
        SetScriptResult(1000000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.25, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TDistortionAura;
  TJunkoCrownAuraDelay;
  
  MainTask;

  TJunkoFinalize;
}

task TJunkoCrownAuraDelay {
  wait(200);
  TJunkoCrownAura;
}

let new_x = GetCenterX();
let new_y = GetCenterY()*0.6;

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  // movement constants
  let move_interval = 200;
  let move_time = 60;

  // random movement control

  if (mainTimer < move_time) {
    if (mainTimer % move_interval == 0) {
      ObjMove_SetDestAtFrame(objBoss, new_x, new_y, move_time);
    } else {
      MDrawJunkoMove(mainTimer % move_interval, move_interval, new_x, new_y, move_time);
    }
  } else {
    if (mainTimer < 200) {
      MDrawJunkoBlink(mainTimer);
      MJunkoBreathe(mainTimer);
    } else {
      MDrawJunkoLaughContinue(mainTimer);
    }
    
  }

  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 80, 255])}
  if (mainTimer % 200 == 0 && mainTimer > 199 && !Obj_IsDeleted(objBoss)) {
    TJunkoShockwave(200, 80, [255, 80, 255]);
  }

  if(mainTimer < 200) {
    ObjEnemy_SetDamageRate(objBoss, 25, 25);
  } else {
    ObjEnemy_SetDamageRate(objBoss, 100, 100);
  }

  mainTimer++;
  yield;
}

task slow_circle(offset, inc, proj) {

  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 1.5, angle, proj, 5);
  }

  angle += offset;

}

task accel_circle(posX, posY, offset, inc, proj, accel, max) {
  
  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    CreateShotA2(posX, posY, 0, angle, accel, max, proj, 5);
  }

  angle += offset;

}


function swirly_laser_circle(posX, posY, offset, inc, proj, angv, length) {
  let angle = offset;
  let angle_inc = inc;
  let lasers = [];

  loop(360/angle_inc) {
    angle+=angle_inc;
    let objLaser = CreateCurveLaserA1(posX, posY, 4, angle,
        length, 18, proj, 0);
    ObjCrLaser_SetTipDecrement(objLaser, 0.5);
    ObjMove_SetAngularVelocity(objLaser, angv);
    lasers = lasers ~ [objLaser];
  }

  return lasers;
}


task MainTask {

  wait(200);
  let loop_iters = 0;
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer01.wav");
  let lasers = [];
  let angleP = rand(0, 360);

  /*
  Attack works like this:
  Junko releases a crimson volley of curved lasers that dance around her
  100 frames pass
  The crimson volley shifts in movement
  Junko releases a purple volley of curved lasers that dance around her
  100 frames pass
  Both volleys are released outwards
  Repeat
  */

  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){
    let bossX = ObjMove_GetX(objBoss);
    let bossY = ObjMove_GetY(objBoss);
    let direction = power(-1, rand_int(0,3)); // determines the chirality of the next laser pattern

    // alternate firing laser volleys with different properties
    // add all the lasers to the laser array
    if (loop_iters % 2 == 0) {
      angleP = rand(0, 360);
      lasers = lasers ~ swirly_laser_circle(bossX, bossY, angleP, 9, 40, direction*4, 70); // crimson
    } else {
      lasers = lasers ~ swirly_laser_circle(bossX, bossY, angleP, 9, 38, -direction*6, 70); // purple
    }

    PlaySFX(laser_sfx);

    wait(100); // wait a bit

    loop_iters++;

    if (loop_iters % 2 == 0) { // "release" both volleys at the same time
      ascent(i in 0..length(lasers)) {
        let objLaser = lasers[i];
        ObjMove_SetAngularVelocity(objLaser, power(-1, i)*0.75);
        ObjShot_SetDeleteFrame(objLaser, 180);
      }
      lasers = []; // clear the array for the next double volley
    } else { // dazzle the player, stall until release interval
      ascent(i in 0..length(lasers)) {
        let objLaser = lasers[i];
        ObjMove_SetAngularVelocity(objLaser, power(-1, i)*5);
      }
    }

  }
  
}