#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Squirrel's Junko - Nonspell 4"]
#Text["Surprisingly hard, but I think it's okay."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
      SetScriptResult(4500);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
      SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
      SetScriptResult(1000000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.25, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TJunkoCrownAura;
  TDistortionAura;
  
  MainTask;

  TJunkoFinalize;
}

let new_x = GetCenterX();
let new_y = GetCenterY()*0.6;

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  // movement constants
  let move_interval = 240;
  let move_time = 60;

  // random movement control
  if (mainTimer % move_interval < move_time) {
    if (mainTimer % move_interval == 0) {
      new_x = GetCenterX() + rand(-50, 50);
      new_y = GetCenterY()*0.6 + rand(-10,10);
      ObjMove_SetDestAtFrame(objBoss, new_x, new_y, move_time);
    } else {
      MDrawJunkoMove(mainTimer % move_interval, move_interval, new_x, new_y, move_time);
    }
  } else {
    MDrawJunkoBlink(mainTimer);
    MJunkoBreathe(mainTimer);
  }

  if (mainTimer < 200) {ObjEnemy_SetDamageRate(objBoss, 25, 25)} else {ObjEnemy_SetDamageRate(objBoss, 100, 100)}
  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 100, 255])}

  mainTimer++;
  yield;
}

task spin_circle(posX, posY, radius, offset, inc, proj, accel, max, direction) {
  
  let angle = offset;
  let angle_inc = inc;
  let start_safe = 0;
  let end_safe = 0;
  let rand_ang = rand(-60,60);

  loop(360/angle_inc) {
    if (ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0 && Obj_IsDeleted(objBoss)) {return;}
    angle+=angle_inc;
    if (!(angle > start_safe && angle < end_safe)) {
      let shot = CreateShotA2(posX+radius*cos(angle), posY+radius*sin(angle), 0, -angle+rand_ang, accel, max, proj, 10);
      ObjMove_SetAngularVelocity(shot, direction);
      ObjShot_SetDeleteFrame(shot, 300);
      ObjShot_SetAutoDelete(shot, 0);
    }  
  }

}

task MainTask {

  wait(200);
  let loop_iters = 0;
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  let orb_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_option.wav");
  let orbs = [];
  let fire_interval = 120;
  let floral_density = 6;
  let direction = 1;

  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){
    let angle = rand(0, 360);
    let bossX = ObjMove_GetX(objBoss);
    let bossY = ObjMove_GetY(objBoss);
    

    if (loop_iters % fire_interval == 0) {
      let playerX = GetPlayerX();
      let playerY = GetPlayerY();
      TJunkoShockwave(200, 80, [255, 100, 255]);
      ascent(i in 0..2) {

        spin_circle(playerX, playerY, 100, angle, 15, 376, 0.02, 2.5, -0.4*direction);
        PlaySFX(laser_sfx);
        
        wait(40);
        direction*=-1;

        spin_circle(playerX, playerY, 150, GetAngleToPlayer(objBoss), 12, 375, 0.02, 4, 0.8*direction);
        PlaySFX(laser_sfx);

        wait(40);
      }
    }

    
    loop_iters++;
    yield;
  }
  
}