#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spellcard \"Tail Trap\""]
#Text["Those are supposed to be tails,[r]but they look like wings..."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
      SetScriptResult(6500);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
      SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
      SetScriptResult(2500000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);
  TJunkoSpellStartFX("\"Seven-Tailed Killing Intent\"", DISPLEASED, 255, 100, 255);

  ObjEnemyBossScene_StartSpell(objScene);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;
  TNotifyBattleEvents;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.25, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TJunkoCrownAura;
  
  MainTask;

  TJunkoFinalize;
}

let new_x = GetCenterX();
let new_y = GetCenterY()*0.5;
let move_interval = 360;
let move_time = 60;

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  if (mainTimer % move_interval < move_time) {
    if (mainTimer % move_interval == 0) {
      new_x = GetCenterX() + rand(-50, 50);
      new_y = GetCenterY()*0.5 + rand(0, 50);
      ObjMove_SetDestAtFrame(objBoss, new_x, new_y, move_time);
    } else {
      MDrawJunkoMove(mainTimer % move_interval, move_interval, new_x, new_y, move_time);
    }
  } else {
    if (mainTimer % move_interval < 200 || mainTimer % move_interval > 240) {
      MDrawJunkoBlink(mainTimer);
      MJunkoBreathe(mainTimer);
    } else {
      MDrawJunkoLaughContinue(mainTimer);
    }
  }

  if (mainTimer < 200) {ObjEnemy_SetDamageRate(objBoss, 25, 25)} else {ObjEnemy_SetDamageRate(objBoss, 100, 100)}
  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 80, 255])}

  mainTimer++;
  yield;
}

task laser_circle(posX, posY, offset, inc, speed, length, width, graphiclaser, graphichead) {
  
  let angle = offset;
  let angle_inc = inc;
  let direction = -0.01;

  loop(360/angle_inc) {
    angle+=angle_inc;
    let laser = CreateLooseLaserA1(posX, posY, speed, angle, length, width, graphiclaser, 15);
    let shot = CreateShotA1(posX + cos(angle), posY + sin(angle), speed, angle, graphichead, 15);
    ObjRender_SetBlendType(shot, BLEND_ADD_ARGB);
    ObjRender_SetAlpha(shot, 230);
  }
}

task diag_circle(posX, posY, offset, inc, proj, accel, max, ang_v) {
  let angle = offset;
  let angle_inc = inc;
  let direction = -1;

  loop(360/angle_inc) {
    angle+=angle_inc;
    let shot = CreateShotA2(posX, posY, 0, angle, accel, max, proj, 10);
    ObjMove_SetAngularVelocity(shot, ang_v*direction);
    direction*=-1;
  }
}

task MainTask {

  wait(200);
  let loop_iters = 0;
  let shoot_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  ObjSound_SetVolumeRate(shoot_sfx, 50);
  let warning = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_boon01.wav");
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer01.wav");
  let tails = [];
  let start_ang = 3;
  let tail_speed = 2.5;
  let tail_bullet_graphic = 342;
  
  loop(7) {
    tails = tails ~ [[]]; // tails is a 2d array of six other arrays
  }
  PlaySFX(warning);

  // attack design - Junko shoots her tails outwards, 
  // and their flapping/waving forces you to get closer to her to not get swept up
  // also she shoots junk at you to make it harder for you to get close to her, and moves around
  // pretty brutal
  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){
    let bossX = ObjMove_GetX(objBoss);
    let bossY = ObjMove_GetY(objBoss);

    // draw her "tails"
    if (loop_iters % 3 == 0) {
      ascent (i in 0..2) {
        let shot0 = CreateShotA1(bossX+35, bossY+25, tail_speed, 30+6*(-1)^i, tail_bullet_graphic, 5);
        tails[0] = tails[0] ~ [shot0];
        ObjMove_SetAngularVelocity(shot0, start_ang);
      }
      ascent (i in 0..2) {
        let shot1 = CreateShotA1(bossX-35, bossY+25, tail_speed, 150+6*(-1)^i, tail_bullet_graphic, 5);
        tails[1] = tails[1] ~ [shot1];
        ObjMove_SetAngularVelocity(shot1, -start_ang);
      }
      ascent (i in 0..2) {
        let shot2 = CreateShotA1(bossX+35, bossY-12, tail_speed, -50+6*(-1)^i, tail_bullet_graphic, 5);
        tails[2] = tails[2] ~ [shot2];
        ObjMove_SetAngularVelocity(shot2, start_ang);
      }
      ascent (i in 0..2) {
        let shot3 = CreateShotA1(bossX-35, bossY-12, tail_speed, 230+6*(-1)^i, tail_bullet_graphic, 5);
        tails[3] = tails[3] ~ [shot3];
        ObjMove_SetAngularVelocity(shot3, -start_ang);
      }
      ascent (i in 0..2) {
        let shot4 = CreateShotA1(bossX+20, bossY-25, tail_speed, -80+6*(-1)^i, tail_bullet_graphic, 5);
        tails[4] = tails[4] ~ [shot4];
        ObjMove_SetAngularVelocity(shot4, start_ang);
      }
      ascent (i in 0..2) {
        let shot5 = CreateShotA1(bossX-20, bossY-25, tail_speed, 260+6*(-1)^i, tail_bullet_graphic, 5);
        tails[5] = tails[5] ~ [shot5];
        ObjMove_SetAngularVelocity(shot5, -start_ang);
      }
    }

    // force the tails 'inward' and 'outwards' with angular velocity changes
    if (loop_iters % 12 == 0) {
      ascent(i in 0..length(tails)) {
        ascent(j in 0..length(tails[i])) {
          let shot = tails[i][j];
          let direction = (-1)^i; 
          ObjMove_SetAngularVelocity(shot, 1.6*direction*cos(loop_iters));
        }
      }
    }
    
    // shoots junk at you - have fun navigating this to avoid the tails...
    if (loop_iters % 60 == 0) {
      let angleP = GetAngleToPlayer(objBoss);
      //ang_circle(bossX, bossY-55, angleP, 9, 349, 0.2, 1.5, -ang_v*0.5);
      diag_circle(bossX, bossY-55, angleP, 6, 349, 0.2, 1.5, 0.25);
      PlaySFX(shoot_sfx);
      
    }
    
    // just so you dont get jumpscared by PLP-mini
    if (loop_iters % move_interval == move_interval-90) {
      TJunkoChargeUpSmallAtPos(bossX, bossY-55, 200, 80, [255, 80, 255]);
    }

    // pure light of the palm lasers - well, close to, cuz i dont have the laser tips
    if (loop_iters % move_interval == 0) {
      laser_circle(bossX, bossY-55, rand(0, 360), 5, 2.4, 120, 18, 342, DROP_PURPLE);
      TJunkoShockwaveAtPos(bossX, bossY-55, 200, 80, [255, 80, 255]);
      PlaySFX(laser_sfx);
    }

    // warning sound for when tails curve inwards
    if (loop_iters % move_interval == move_interval - 60) {
      PlaySFX(warning);
    }

    loop_iters++;
    yield;
  }
  
}