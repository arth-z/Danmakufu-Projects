#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spellcard \"Purple Star\""]
#Text["Yeah, definitely milking it [r]too hard. On the plus side, [r] have the most scary survival[r] I could think of."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"
#include "./HatefulStar.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
        SetScriptResult(100000);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
        SetScriptResult(43);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
        SetScriptResult(3000000);
    }
    case(EV_REQUEST_IS_DURABLE_SPELL) {
        SetScriptResult(true);
    }
}

@Initialize 
{
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);

  TLoadJunkoFX;
  TNotifyBattleEvents;
  TSpellCardWait;
  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()*0.5, 60);

  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TJunkoCrownAura;
  TJunkoHitFX;
  
  TStarInitialise(GetCenterX(), GetCenterY(), 0, 0);
  TStarDraw(200, "purple");
  TStarHitFX;
  
  MainTask;

  TJunkoFinalize;
  TStarFinalize;
}

task TSpellCardWait() { // you thought this would be a nonspell? get survivaled, lmao
  wait(200);
  ObjEnemyBossScene_StartSpell(objScene);
  ObjEnemy_Regist(objBoss);
  TJunkoSpellStartFX("Hateful Star \"Pristine Maelstrom\"", NEUTRAL, 255, 50, 255);

}

@MainLoop 
{ 
  ObjEnemy_SetDamageRate(objBoss, 0, 0);
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);

  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  // movement constants
  let move_interval = 120;
  let move_time = 150;

  // move into place, sit there charging up, laugh a bit, then just dip
  if (mainTimer < 16) {
    ObjEnemy_SetDamageRate(objBoss, 25, 25);
    MDrawJunkoMotionBegin(mainTimer);
  } else if (mainTimer < 44) {
    MDrawJunkoMotionContinue(mainTimer);
  } else if (mainTimer < 60) {
    MDrawJunkoMotionEnd(mainTimer);
  } else if (mainTimer < 200) {
    MDrawJunkoBlink(mainTimer);
    MJunkoBreathe(mainTimer);
  } else if (mainTimer < 210) {
    MDrawJunkoLaughContinue(mainTimer);
  } else if (mainTimer < 226) {
    MDrawJunkoMotionBegin(mainTimer);
  } else {
    MDrawJunkoMotionContinue(mainTimer);
    ObjMove_SetDestAtWeight(objBoss, GetCenterX(), GetCenterY()*-20, 0.1, 2);
  }
  
     

  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 80, 255])};
  
  if (mainTimer > 200) {UpdateStarHitbox}

  mainTimer++;
  yield;
}

// circle for blender "lasers" - it's actually just individual projectiles
task ang_circle(posX, posY, offset, inc, proj, accel, max, ang_v) {
  
  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    let shot = CreateShotA2(posX, posY, 0, angle, accel, max, proj, 5);
    ObjMove_SetAngularVelocity(shot, ang_v);
    ObjShot_SetSpellResist(shot, true);
  }
}

function circle_in(posX, posY, radius, offset, inc, proj, start, accel, max, delay) {
  
  let angle = offset;
  let angle_inc = inc;
  let shots = [];

  loop(360/angle_inc) {
    angle+=angle_inc;
    let shot = CreateShotA2(posX + cos(angle)*radius, posY + sin(angle)*radius, start, 180+angle, accel, max, proj, delay);
    ObjShot_SetAutoDelete(shot, false);
    shots = shots ~ [shot];
  }
  return shots;

}

task MainTask {

  let shoot_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  ObjSound_SetVolumeRate(shoot_sfx, 60);
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer00.wav");
  let boom_spawn = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_tan00.wav");
  let warning = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_boon01.wav");
  let warning2 = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_ch00.wav");
  let desperation = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_nep00.wav");
  TLoadColourShader("Purple");

  wait(200);
  PlaySFX(boom_spawn);
  TStarShockwave("purple");
  let loop_iters = 0;
  
  // laser variables
  let lasers = [];
  let laser_interval = 120;
  let laser_count = 12;
  let angleL = 0;

  // blender variables
  let blender_count = 7;
  let blender_wave = 3;
  let blender_offset = GetAngleToPlayer(objBoss);
  let blender_speed = 0.5 * (-1)^rand_int(0,9);
  let blender_target_speed = blender_speed;
  let star_spin = blender_speed;

  // time related blender phase variables
  let blender_changes = [2*60, 7*60, 12*60, 16*60, 20*60, 23*60, 26*60, 28*60, 30*60];
  let blender_index = 0;
  let blender_shift_time = 30;

  // other variables
  let shotsToDelete = [];
  let aux_blender_angle = 0;
  let starX;
  let starY;

  // attack design - a stress-control survival (blender = follow the spinning lasers)
  // curvy blender blades are weird and unnerving but the real fear factor is frequent spin-direction changes 
  // this also gets combo'd with the familiar star-dazzle lasers to mess with your sense of space management
  // there's also an accelerating auxiliary pattern fired inwards to mess with your sense of space management even MORE
  // survival intensification is here too: spirals grow denser, blender blades go faster, direction changes become more frequent
  // and eventually in the last moments all hell breaks loose as the star decides it's had enough and starts moving towards you
  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){

    starX = ObjMove_GetX(objStar);
    starY = ObjMove_GetY(objStar);
    
    // lasers
    if (loop_iters > blender_changes[0]) {
      if (loop_iters % laser_interval == 0) {
        lasers = [];
        angleL = (360/laser_count)/2;
        loop(laser_count) {
          let laser = CreateStraightLaserA1(starX, starY, angleL, 
                  512, 20, 20, CTC_LASER_PURPLE, laser_interval);
          angleL += 360/laser_count;
          ObjLaser_SetGrazeInvalidFrame(laser, 5); 
          ObjLaser_SetInvalidLength(laser, 5, 5); 

          lasers = lasers ~ [laser];
        }
        PlaySFX(laser_sfx);
        PlaySFX(boom_spawn);
        TStarShockwave("purple");
      }

      let len = length(lasers);
      let magnitude = (laser_interval - (loop_iters % laser_interval))/laser_interval;

      ascent(i in 0..len) {
        let laser = lasers[i];
        let angle = ObjStLaser_GetAngle(laser);
        let direction = power(-1, i%2+1);
        ObjStLaser_SetAngle(laser, angle+magnitude*direction);
        ObjMove_SetPosition(laser, starX, starY);
        ObjLaser_SetLength(laser, ObjLaser_GetLength(laser))
      }

      if (loop_iters % laser_interval < laser_interval/5 && loop_iters > blender_changes[0] + laser_interval*2) {
        TColour(true);
      } else {
        TColour(false);
      }
    }
    
    // basic blender pattern
    // it fires every frame, and basically 'works' as a laser despite being like, 5000 murasa droplets
    // this is...basically a BoWaP variant, if you look at the way blender_offset and blender_speed are controlled
    if (loop_iters > 30) {
      ang_circle(starX, starY, blender_offset, 360/blender_count, DROP_PURPLE, 0.1, blender_wave, 0);
      blender_offset+=blender_speed;
    }

    // escalations - spiral inwards dark ovals
    if (blender_index > 1 && blender_index < length(blender_changes) && loop_iters % 60 == 0) {
      let shots = circle_in(starX, starY, 260, aux_blender_angle, 72, 204, 0, 0.05, 1.5, 30);
      ascent(i in 0..length(shots)) {
        let shot = shots[i];
        ObjShot_SetDeleteFrame(shot, 185);
      }
      shotsToDelete = shotsToDelete ~ shots;
      PlaySFX(shoot_sfx);
      aux_blender_angle+=15;
    }
    if (blender_index > 2 && blender_index < length(blender_changes) && loop_iters % 60 == 30) {
      let shots = circle_in(starX, starY, 260, aux_blender_angle, 72, 204, 0, 0.05, 1.5, 30);
      ascent(i in 0..length(shots)) {
        let shot = shots[i];
        ObjShot_SetDeleteFrame(shot, 185);
      }
      shotsToDelete = shotsToDelete ~ shots;
      PlaySFX(shoot_sfx);
      aux_blender_angle+=15;
    }
    if (blender_index > 3 && blender_index < length(blender_changes) && loop_iters % 60 == 15) {
      let shots = circle_in(starX, starY, 260, aux_blender_angle, 72, 204, 0, 0.05, 1.5, 30);
      ascent(i in 0..length(shots)) {
        let shot = shots[i];
        ObjShot_SetDeleteFrame(shot, 185);
      }
      shotsToDelete = shotsToDelete ~ shots;
      PlaySFX(shoot_sfx);
      aux_blender_angle+=15;
    }
    if (blender_index > 4 && blender_index < length(blender_changes) && loop_iters % 60 == 45) {
      let shots = circle_in(starX, starY, 260, aux_blender_angle, 72, 204, 0, 0.05, 1.5, 30);
      ascent(i in 0..length(shots)) {
        let shot = shots[i];
        ObjShot_SetDeleteFrame(shot, 185);
      }
      shotsToDelete = shotsToDelete ~ shots;
      PlaySFX(shoot_sfx);
      aux_blender_angle+=15;
    }

    // blender shifting
    // bounds check of phase-timer array, shift blender velocity to a target velocity opposite and greater than the last
    // if out of phase-timer array, go into "supercritical" phase
    if (blender_index < length(blender_changes)) {
      let blender_phase = blender_changes[blender_index];

      if (loop_iters == blender_phase) {
        blender_index++;
        blender_target_speed = blender_speed*-1.07;
        PlaySFX(warning);
        if (blender_index == length(blender_changes) - 1) { // charge-up as a warning right before supercritical phase
          ShockwaveCharge(starX, starY, 120, 6, [255, 80, 255]);
          PlaySFX(warning2);
        }
      }

      if (absolute(blender_speed) < absolute(blender_target_speed)) { // only reverse direction if in not supercritical phase
        let star_spin=blender_speed;
        SetStarSpinRate(star_spin);
        blender_speed+=blender_target_speed/blender_shift_time;
      }
    } else { 
      if (blender_index == length(blender_changes)) { // warning, warning
        TStarShockwave("purple");
        PlaySFX(warning);
        PlaySFX(warning);
        PlaySFX(warning);
        PlaySFX(desperation);
        ascent(i in 0..length(shotsToDelete)) { // this is what that shotsToDelete array is for
          ObjShot_ToItem(shotsToDelete[i]); // prevent boring cheapshots since next phase is kinda nuts
        }
        ScreenShakeA1(30, 3); // visual impact to coincide with shockwave
      } else { // warning's over, now RUN!
        ScreenShakeA1(15, 2);
        TColour(true);
        SetStarMovement(1, GetAngleToPlayer(objStar)); // the actual movement part of the "RUN!" phase
        if (blender_index % 120 == 0) {
          PlaySFX(desperation);
        }
        if (blender_index % 9 == 0) { // also fires a bunch of aimed junk at you (looks nice, though)
          ang_circle(starX, starY, GetAngleToPlayer(objStar) + rand(-2, 2), 36, 204, 0.03, 6, 0);
          PlaySFX(shoot_sfx);
        }
      }
      blender_index++;
    }

    loop_iters++;
    yield;
  }
  ObjSound_Stop(desperation);
  TColour(false);
  TUnloadColourShader;
  NotifyEventAll(EV_USER_STAGE+888, [starX, starY]);
}