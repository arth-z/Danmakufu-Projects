#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spellcard \"Blossom\""]
#Text["I playtested this once without [r]the telegraph lines. It sucked.[r]Well, at least they look nice."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
      SetScriptResult(5000);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
      SetScriptResult(60);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
      SetScriptResult(2500000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);
  TJunkoSpellStartFX("\"Flawless Blossoms of Enmity\"", DISPLEASED, 255, 100, 100);

  ObjEnemyBossScene_StartSpell(objScene);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;
  TNotifyBattleEvents;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.25, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  TJunkoCrownAura;
  
  MainTask;

  TJunkoFinalize;
}

let new_x = GetCenterX();
let new_y = GetCenterY()*0.6;

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  // movement constants
  let move_interval = 240;
  let move_time = 60;

  // random movement control
  if (mainTimer % move_interval < move_time) {
    if (mainTimer % move_interval == 0) {
      new_x = GetCenterX() + rand(-50, 50);
      new_y = GetCenterY()*0.6 + rand(-10,10);
      ObjMove_SetDestAtFrame(objBoss, new_x, new_y, move_time);
    } else {
      MDrawJunkoMove(mainTimer % move_interval, move_interval, new_x, new_y, move_time);
    }
  } else {
    MDrawJunkoBlink(mainTimer);
    MJunkoBreathe(mainTimer);
  }

  if (mainTimer < 200) {ObjEnemy_SetDamageRate(objBoss, 25, 25)} else {ObjEnemy_SetDamageRate(objBoss, 100, 100)}
  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [255, 80, 80])}

  mainTimer++;
  yield;
}


function floral_laser_circle(posX, posY, offset, inc, speed, proj, angv, length, width) {
  let angle = offset;
  let angle_inc = inc;
  let direction = -1;
  let lasers = [];

  loop(360/angle_inc) {
    angle+=angle_inc;
    let objLaser = CreateCurveLaserA1(posX, posY, speed, angle,
        length, width, proj, 0);
    ObjCrLaser_SetTipDecrement(objLaser, 0.5);
    ObjMove_SetAngularVelocity(objLaser, angv*direction);
    direction*=-1;
    lasers = lasers ~ [objLaser];
  }

  return lasers;
}

task spin_circle(posX, posY, offset, inc, proj, startspeed, accel, max, direction) {
  
  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    let shot = CreateShotA2(posX, posY, startspeed, angle, accel, max, proj, 10);
    ObjRender_SetBlendType(shot, BLEND_ADD_ARGB);
    ObjMove_SetAngularVelocity(shot, direction*0.5);
  }

}

task MainTask {

  wait(200);
  let loop_iters = 0;
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer00.wav");
  let orb_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_option.wav");
  let lasers = [];
  let orbs = [];
  let fire_interval = 120;
  let bloom_interval = fire_interval*2;
  let floral_density = 20;
  let angle = 0;
  let angleOrb = 0;
  let orbCount = 2;

  // attack design - difficult tri-direction "floral" curved laser reading (plus some balls to look nice)
  // the "orb" throw mechanism into flower bloom is a callback to Lilies of Murderous Intent
  // the only bone I can throw out for you is a telegraph line of ambiguous clarity...at least it looks pretty
  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){
    let bossX = ObjMove_GetX(objBoss);
    let bossY = ObjMove_GetY(objBoss);

    if(true) {
      if (loop_iters % fire_interval == fire_interval/2) { // flower bloom initial
        ascent(i in 0..length(orbs)) {
          let orbX = ObjMove_GetX(orbs[i]);
          let orbY = ObjMove_GetY(orbs[i]);

          if (!Obj_IsDeleted(orbs[i])) { // prevent 0/0 spawning in the case of bomb deletions

          // line telegraphs - oooo, they disappear as they complete the petals of the flower!
            ascent(i in 0..(360/floral_density)) {
              if (i % 2 == 1) {
                ExpandOutTelegraphLaser(orbX, orbY, angle+(floral_density/2)+i*floral_density, 450, 200, 0, FIRE_PURPLE, fire_interval*1.5);
              }
            }

            // spawn the actual projectiles, adds to array to control it later
            lasers = lasers ~ floral_laser_circle(orbX, orbY, angle, floral_density, 5, 41, 6, 30, 20); 

            // these projectile spawns are doubled to make them more visible
            spin_circle(orbX, orbY, angle+(floral_density/2)+floral_density, floral_density*2, 234, 0, 0.05, 3, 0);
            spin_circle(orbX, orbY, angle+(floral_density/2)+floral_density, floral_density*2, 234, 0, 0.05, 3, 0);

            // delete orb
            ObjShot_FadeDelete(orbs[i]);

            // angle of the flower blooms are random
            angle = rand(0, 360);
          }
        
      }
      PlaySFX(laser_sfx);
      orbs = [];
      } else if (loop_iters % fire_interval == 0) { // flower throw
        let orb = CreateShotA2(bossX, bossY, 0, 0, 0, 0, 406, 0);
        ObjShot_SetIntersectionEnable(orb, false);
        ObjRender_SetAlpha(orb, 155);

        // one orb above boss
        let targetX = bossX;
        let targetY = bossY*0.8;

        ObjMove_SetDestAtWeight(orb, targetX, targetY, 20, 10);
        orbs = orbs ~ [orb];
        
        ascent(i in 0..orbCount) { // two orbs around center
          let orb = CreateShotA2(bossX, bossY, 0, 0, 0, 0, 406, 0);
          ObjShot_SetIntersectionEnable(orb, false);
          ObjRender_SetAlpha(orb, 155);

          let targetX = GetCenterX() + cos(angleOrb)*160;
          let targetY = GetCenterY() + sin(angleOrb)*160;

          ObjMove_SetDestAtWeight(orb, targetX, targetY, 20, 10);
          orbs = orbs ~ [orb];
          angleOrb+=360/orbCount;
        }
        TJunkoShockwave(200, 80, [255, 80, 80]);
        angleOrb=rand(-35, 35);
        PlaySFX(orb_sfx);
      }

      // full bloom - lasers go outwards into large petals
      if (loop_iters % fire_interval  == 0) {
        ascent(i in 0..length(lasers)) {
          ObjMove_SetAngularVelocity(lasers[i], -power(-1, i)*1.25);
          ObjShot_SetDeleteFrame(lasers[i], 180);
        }
      lasers = [];
      }

    }

    loop_iters++;
    yield;
  }
  
}