#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spellcard \"Blue Star\""]
#Text["\"Trembling, Shivering Star\" but[r] taken very literally."]
#System["./JunkoSystem.dnh"]
#Background["./JunkoBackground.dnh"]

#include "./func_library.dnh"
#include "./img/ZUNShot_Const.txt"
#include "./JunkoFX.dnh"
#include "./HatefulStar.dnh"

let mainTimer = 0;

@Event 
{
  alternative(GetEventType())
    case(EV_REQUEST_LIFE){ //Sets boss's life
        SetScriptResult(6000);
    }
    case(EV_REQUEST_TIMER){ //Sets attack time
        SetScriptResult(70);
    }
    case(EV_REQUEST_SPELL_SCORE){ //Spellcard bonus
        SetScriptResult(2000000);
    }
}

@Initialize 
{ 
  objScene = GetEnemyBossSceneObjectID();
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  TJunkoSpellStartFX("Frigid Star \"Absolute Radiance\"", NEUTRAL, 150, 150, 255);

  ObjEnemyBossScene_StartSpell(objScene);
  ObjEnemy_Regist(objBoss);

  TLoadJunkoFX;
  TNotifyBattleEvents;

  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), GetCenterY()/1.25, 60);

  TJunkoHitFX;
  TJunkoBurnAura;
  TJunkoCircleAura;
  TJunkoShadowAura;
  
  TStarInitialise(GetCenterX(), GetCenterY()/3, 0, 0);
  TStarDraw(200, "blue");
  SetStarSpinRate(1);
  
  TJunkoCrownAuraDelay;

  MainTask;

  TJunkoFinalize;
  TStarFinalize;
}

task TJunkoCrownAuraDelay {
  wait(200);
  TJunkoCrownAura;
}

@MainLoop 
{
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  
  let bossX = ObjMove_GetX(objBoss);
  let bossY = ObjMove_GetY(objBoss);

  if (mainTimer < 16) {
    ObjEnemy_SetDamageRate(objBoss, 25, 25);
    MDrawJunkoMotionBegin(mainTimer);
  } else if (mainTimer < 44) {
    MDrawJunkoMotionContinue(mainTimer);
  } else if (mainTimer < 60) {
    MDrawJunkoMotionEnd(mainTimer);
  } else if (mainTimer < 200) {
    MDrawJunkoBlink(mainTimer);
    MJunkoBreathe(mainTimer);
  } else {
    MDrawJunkoLaughContinue(mainTimer);
    ObjEnemy_SetDamageRate(objBoss, 100, 100);
  }

  if (mainTimer == 60) {TJunkoChargeUp(200, 80, [100, 100, 255])};

  UpdateStarHitbox;
  mainTimer++;
  yield;
}

task circle(offset, speed, inc, proj) {

  let angle = offset;
  let angle_inc = inc;

  loop(360/angle_inc) {
    angle+=angle_inc;
    let shot = CreateShotA1(ObjMove_GetX(objStar), ObjMove_GetY(objStar), speed, angle, proj, 10);
    ObjRender_SetBlendType(shot, BLEND_ADD_ARGB);
  }
}

task MainTask {

  let shoot_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_kira00.wav");
  let laser_sfx = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_lazer00.wav");
  let boom_spawn = SoundSFX(GetCurrentScriptDirectory() ~ "./sfx/se_tan00.wav");

  wait(200);
  PlaySFX(boom_spawn);

  let angleL = 0;
  let angleS = 0;
  let loop_iters = 0;
  let lasers = [];
  let laser_interval = 120;

  TLoadColourShader("Blue"); // this is a saturation shader that makes everything bright and blue

  // attack design - tap-tap to dodge blue bullet rings with intermittent last-second reads against dense laser blasts
  // there's always a gap for you to dodge through the projectiles - reading and finding it is the problem
  // introduces the "Star" mechanics - namely the dazzle-spin lasers
  while(ObjEnemy_GetInfo(objBoss,INFO_LIFE) > 0){

    angleL = GetAngleToPlayer(objStar);
    
    // radial lasers are created at a specific interval and initialised into a fresh array
    // the array is cleared as the lasers fire and new lasers are populated into it
    // as the lasers fire, the screen shakes and a saturation shader is applied
    if (loop_iters % laser_interval == 0) {
      lasers = [];
      loop(60) {
        let laser = CreateStraightLaserA1(ObjMove_GetX(objStar), ObjMove_GetY(objStar), angleL, 
                512, 20, laser_interval*0.25, CTC_LASER_BLUE, laser_interval);
        angleL += 6;
        ObjLaser_SetGrazeInvalidFrame(laser, 5); 
        ObjLaser_SetInvalidLength(laser, 5, 5); 

        lasers = lasers ~ [laser];
      }
      PlaySFX(laser_sfx);
      PlaySFX(boom_spawn);
      TStarShockwave("blue");
    }

    // load in shader and apply it in time with the laser bursts
    if (loop_iters % laser_interval < laser_interval/3 && loop_iters > laser_interval) {
      TColour(true);
    } else {
      TColour(false);
    }

    // outside of that interval, the lasers are continuously rotated to deccelerate before the laser shoots
    // alternating lasers rotate in opposite directions, creating a dazzling effect
    let len = length(lasers);
    let magnitude = (laser_interval - (loop_iters % laser_interval))/laser_interval;
    ascent(i in 0..len) {
      let laser = lasers[i];
      let angle = ObjStLaser_GetAngle(laser);
      let direction = power(-1, i%2+1);
      ObjStLaser_SetAngle(laser, angle+magnitude*direction);
    }

    // also TSS-lite projectiles lmao
    if (loop_iters % (laser_interval/5) == 0) {
      circle(angleS, 1.5, 3, SMALL_BLUE);
      angleS += 1.5;
      PlaySFX(shoot_sfx);
    }

    loop_iters++;
    yield;
  }
  TStarShockwave("blue");
  TUnloadColourShader;
}